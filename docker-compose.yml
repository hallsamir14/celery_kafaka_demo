version: '3.8'
networks:
  kafka_network:
    driver: bridge

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    networks:
      - kafka_network
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181", "|", "grep", "imok"]
      interval: 10s
      timeout: 10s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    networks:
      - kafka_network
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 10s
      timeout: 10s
      retries: 5

  minio:
    image: minio/minio
    container_name: minio
    networks:
      - kafka_network
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9001"]
      interval: 30s
      timeout: 20s
      retries: 3

  kafka_consumer:
    build:
      context: .
      dockerfile: kafka_consumer/Dockerfile
    container_name: kafka_consumer
    networks:
      - kafka_network
    depends_on:
      - kafka
      - minio
      - kafka_producer
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_TOPIC: kafka_commands

  kafka_producer:
    build:
      context: .
      dockerfile: kafka_producer/Dockerfile
    container_name: kafka_producer
    networks:
      - kafka_network
    depends_on:
      - kafka
      - minio
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_TOPIC: kafka_commands

  discord_speak_consumer:
    build:
      context: .
      dockerfile: discord_speak_consumer/Dockerfile
    container_name: discord_speak_consumer
    networks:
      - kafka_network
    depends_on:
      - kafka
      - minio
      - kafka_producer

  discord_listen_producer:
    build:
      context: .
      dockerfile: discord_listen_producer/Dockerfile
    container_name: discord_listen_producer
    networks:
      - kafka_network
    depends_on:
      - kafka
      - minio
      - kafka_producer

  github_producer:
    build:
      context: .
      dockerfile: github_producer/Dockerfile
    container_name: github_producer
    networks:
      - kafka_network
    depends_on:
      - kafka
      - redis
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_COMMITS_TOPIC: github_commits
      KAFKA_REPOSITORIES_TOPIC: github_repositories
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}

  redis:
    image: redis:latest
    container_name: redis
    networks:
      - kafka_network
    ports:
      - "6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD}

volumes:
  minio_data: